{"name":"Gulp-progeny","tagline":"Faster Gulp Building","body":"gulp-progeny\r\n===============\r\nA dependency-resolving plugin for gulp.\r\nIt grabs all files related to one edition to building system.\r\n\r\n##Introduction\r\nGulp provides [incremental building](https://github.com/wearefractal/gulp-cached).\r\nHowever it is agnostic about the dependencies among files.\r\nSay, if `child.jade` depends on `parent.jade`, then whenever `parent` changes `child` should be recompiled as well.\r\nExisting gulp plugins do not support this. Or one could fall back on `edit-wait-10s-view` loop.\r\n\r\n`gulp-progeny` aims to solve this. If `parent.jade` is edited and passed to `gulp-progeny`, all files that recursively depends on that file will be collected by `progeny` and are passed to succesive building stream.\r\n\r\n##What does gulp-progeny do\r\nThis plugin brings the agility of [brunch](https://github.com/brunch/brunch) to gulp world.\r\nIt provides generic dependency detection to various file types.\r\n`progeny` parses files by grepping specific `import statements`, and builds dependency trees for building tasks.\r\nSo it just use Regular Expression to extract dependency information. This simple solution is fast and dirty, but also working.\r\n\r\n##Usage\r\n`gulp-progeny` out of box supports `jade`, `jedi`,`less`, `sass` and `stylus`.\r\nTo exploit the power of `gulp-progeny`, use `gulp-cached` in tandem.\r\n\r\n```javascript\r\nvar cache = require('gulp-cached');\r\nvar progeny = require('gulp-progeny');\r\nvar stylus = require('gulp-stylus');\r\n\r\ngulp.task('style', function(){\r\n  return gulp.src('*.styl')\r\n    .pipe(cache('style'))\r\n    .pipe(progeny())\r\n    .pipe(stylus())\r\n});\r\n\r\ngulp.task('watch', function(){\r\n  gulp.watch('*.styl', ['style']);\r\n});\r\n```\r\n\r\n`cached` will pass all files to `progeny` in the first run, which enables dependency tree building,\r\njust pass changed files later for incremental building.\r\n\r\n##advanced configuration\r\nGenerally same as brunch's [progeny](https://github.com/es128/progeny).\r\nJust pass configuration to progeny constructor.\r\n\r\n```javascript\r\nvar progenyConfig = {\r\n    // The file extension for the source code you want parsed\r\n    // Will be derived from the source file path if not specified\r\n    extension: 'styl',\r\n\r\n    // Array of multiple file extensions to try when looking for dependencies\r\n    extensionsList: ['scss', 'sass'],\r\n\r\n    // Regexp to run on each line of source code to match dependency references\r\n    // Make sure you wrap the file name part in (parentheses)\r\n    regexp: /^\\s*@import\\s+['\"]?([^'\"]+)['\"]?/,\r\n\r\n    // File prefix to try (in addition to the raw value matched in the regexp)\r\n    prefix: '_',\r\n\r\n    // Matched stuff to exclude: string, regex, or array of either/both\r\n    exclusion: /^compass/,\r\n\r\n    // In case a match starts with a slash, the absolute path to apply\r\n    rootPath: path.join('path', 'to', 'project')\r\n};\r\nvar progeny = require('gulp-progeny')\r\n\r\ngulp.src('*.styl').pipe(progeny(progenyConfig))\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}